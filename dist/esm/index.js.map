{"version":3,"file":"index.js","sources":["../../src/MockStorage.ts","../../src/SimplePromiseQueue.ts","../../src/utils.ts","../../src/index.ts"],"sourcesContent":["/**\r\n * Created by championswimmer on 22/07/17.\r\n */\r\nlet MockStorage: typeof Storage | undefined\r\n\r\n// @ts-ignore\r\nif (process.env.MODULE_FORMAT !== 'umd') {\r\n  MockStorage = class implements Storage {\r\n    [index: number]: string;\r\n    [key: string]: any;\r\n\r\n    public get length(): number {\r\n      return Object.keys(this).length\r\n    }\r\n\r\n    public key(index: number): string | any {\r\n      return Object.keys(this)[index]\r\n    }\r\n\r\n    public setItem(key: string, data: any): void {\r\n      this[key] = data.toString()\r\n    }\r\n    public getItem(key: string): string {\r\n      return this[key]\r\n    }\r\n    public removeItem(key: string): void {\r\n      delete this[key]\r\n    }\r\n    public clear(): void {\r\n      for (let key of Object.keys(this)) {\r\n        delete this[key]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { MockStorage }\r\n","// tslint:disable: variable-name\r\nexport default class SimplePromiseQueue {\r\n  private readonly _queue: Array<Promise<void>> = []\r\n  private _flushing = false\r\n\r\n  public enqueue(promise: Promise<void>) {\r\n    this._queue.push(promise)\r\n    if (!this._flushing) { return this.flushQueue() }\r\n    return Promise.resolve()\r\n  }\r\n\r\n  private flushQueue() {\r\n    this._flushing = true\r\n\r\n    const chain = (): Promise<void> | void => {\r\n      const nextTask = this._queue.shift()\r\n      if (nextTask) {\r\n        return nextTask.then(chain)\r\n      } else {\r\n        this._flushing = false\r\n      }\r\n    }\r\n    return Promise.resolve(chain())\r\n  }\r\n}\r\n","import deepmerge from 'deepmerge'\r\n\r\nexport type MergeOptionType = 'replaceArrays' | 'concatArrays'\r\n\r\nconst options: {[k in MergeOptionType]: deepmerge.Options} = {\r\n  replaceArrays: {\r\n    arrayMerge: (destinationArray, sourceArray, options) => sourceArray\r\n  },\r\n  concatArrays: {\r\n    arrayMerge: (target, source, options) => target.concat(...source)\r\n  }\r\n}\r\n\r\nconst defaultMergeOptions: deepmerge.Options = {\r\n  // replacing arrays\r\n  \r\n}\r\n\r\nexport function merge<I, F>(into: Partial<I>, from: Partial<F>, mergeOption: MergeOptionType): I & F & {} {\r\n  return deepmerge(into, from, options[mergeOption])\r\n}\r\n","/**\r\n * Created by championswimmer on 18/07/17.\r\n */\r\nimport { Mutation, MutationPayload, Plugin, Store } from 'vuex'\r\nimport { AsyncStorage } from './AsyncStorage'\r\nimport { MockStorage } from './MockStorage'\r\nimport { PersistOptions } from './PersistOptions'\r\nimport SimplePromiseQueue from './SimplePromiseQueue'\r\nimport { merge, MergeOptionType } from './utils'\r\n\r\nlet FlattedJSON = JSON\r\n\r\n/**\r\n * A class that implements the vuex persistence.\r\n * @type S type of the 'state' inside the store (default: any)\r\n */\r\nexport class VuexPersistence<S> implements PersistOptions<S> {\r\n  public asyncStorage: boolean\r\n  public storage: Storage | AsyncStorage | undefined\r\n  public restoreState: (key: string, storage?: AsyncStorage | Storage) => Promise<S> | S\r\n  public saveState: (key: string, state: {}, storage?: AsyncStorage | Storage) => Promise<void> | void\r\n  public reducer: (state: S) => Partial<S>\r\n  public key: string\r\n  public filter: (mutation: MutationPayload) => boolean\r\n  public modules: string[]\r\n  public strictMode: boolean\r\n  public supportCircular: boolean\r\n  public mergeOption: MergeOptionType\r\n\r\n  /**\r\n   * The plugin function that can be used inside a vuex store.\r\n   */\r\n  public plugin: Plugin<S>\r\n  /**\r\n   * A mutation that can be used to restore state\r\n   * Helpful if we are running in strict mode\r\n   */\r\n  public RESTORE_MUTATION: Mutation<S>\r\n  public subscribed: boolean\r\n\r\n  // tslint:disable-next-line:variable-name\r\n  private _mutex = new SimplePromiseQueue()\r\n\r\n  /**\r\n   * Create a {@link VuexPersistence} object.\r\n   * Use the <code>plugin</code> function of this class as a\r\n   * Vuex plugin.\r\n   * @param {PersistOptions} options\r\n   */\r\n  public constructor(options?: PersistOptions<S>) {\r\n    if (typeof options === 'undefined') options = {} as PersistOptions<S>\r\n    this.key = ((options.key != null) ? options.key : 'vuex')\r\n\r\n    this.subscribed = false\r\n    this.supportCircular = options.supportCircular || false\r\n    if (this.supportCircular) {\r\n      FlattedJSON = require('flatted')\r\n    }\r\n    this.mergeOption = options.mergeOption || 'replaceArrays'\r\n\r\n    let localStorageLitmus = true\r\n\r\n    try {\r\n      window.localStorage.getItem('')\r\n    } catch (err) {\r\n      localStorageLitmus = false\r\n    }\r\n\r\n    /**\r\n     * 1. First, prefer storage sent in optinos\r\n     * 2. Otherwise, use window.localStorage if available\r\n     * 3. Finally, try to use MockStorage\r\n     * 4. None of above? Well we gotta fail.\r\n     */\r\n    if (options.storage) { this.storage = options.storage }\r\n    else if (localStorageLitmus) { this.storage = window.localStorage }\r\n    else if (MockStorage) { this.storage = new MockStorage() }\r\n    else { throw new Error(\"Neither 'window' is defined, nor 'MockStorage' is available\") }\r\n\r\n    /**\r\n     * How this works is -\r\n     *  1. If there is options.reducer function, we use that, if not;\r\n     *  2. We check options.modules;\r\n     *    1. If there is no options.modules array, we use entire state in reducer\r\n     *    2. Otherwise, we create a reducer that merges all those state modules that are\r\n     *        defined in the options.modules[] array\r\n     * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\r\n     */\r\n    this.reducer = (\r\n      (options.reducer != null)\r\n        ? options.reducer\r\n        : (\r\n          (options.modules == null)\r\n            ? ((state: S) => state)\r\n            : (\r\n              (state: any) =>\r\n                (options!.modules as string[]).reduce((a, i) =>\r\n                  merge(a, { [i]: state[i] }, this.mergeOption), {/* start empty accumulator*/ })\r\n            )\r\n        )\r\n    )\r\n\r\n    this.filter = options.filter || ((mutation) => true)\r\n\r\n    this.strictMode = options.strictMode || false\r\n\r\n    const _this = this\r\n    this.RESTORE_MUTATION = function RESTORE_MUTATION(state: S, savedState: any) {\r\n      const mergedState = merge(state, savedState || {}, _this.mergeOption)\r\n      for (const propertyName of Object.keys(mergedState as {})) {\r\n        // Maintain support for vue 2\r\n        if ((this as any)._vm !== undefined && (this as any)._vm.$set !== undefined) {\r\n          (this as any)._vm.$set(state, propertyName, (mergedState as any)[propertyName])\r\n          continue\r\n        }\r\n\r\n        (state as any)[propertyName] = (mergedState as any)[propertyName]\r\n      }\r\n    }\r\n\r\n    this.asyncStorage = options.asyncStorage || false\r\n\r\n    if (this.asyncStorage) {\r\n\r\n      /**\r\n       * Async {@link #VuexPersistence.restoreState} implementation\r\n       * @type {((key: string, storage?: Storage) =>\r\n       *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\r\n       */\r\n      this.restoreState = (\r\n        (options.restoreState != null)\r\n          ? options.restoreState\r\n          : ((key: string, storage: AsyncStorage) =>\r\n            (storage).getItem(key)\r\n              .then((value) =>\r\n                typeof value === 'string' // If string, parse, or else, just return\r\n                  ? (\r\n                    this.supportCircular\r\n                      ? FlattedJSON.parse(value || '{}')\r\n                      : JSON.parse(value || '{}')\r\n                  )\r\n                  : (value || {})\r\n              )\r\n          )\r\n      )\r\n\r\n      /**\r\n       * Async {@link #VuexPersistence.saveState} implementation\r\n       * @type {((key: string, state: {}, storage?: Storage) =>\r\n       *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\r\n       */\r\n      this.saveState = (\r\n        (options.saveState != null)\r\n          ? options.saveState\r\n          : ((key: string, state: {}, storage: AsyncStorage) =>\r\n            (storage).setItem(\r\n              key, // Second argument is state _object_ if asyc storage, stringified otherwise\r\n              // do not stringify the state if the storage type is async\r\n              (this.asyncStorage\r\n                ? merge({}, state || {}, this.mergeOption)\r\n                : (\r\n                  this.supportCircular\r\n                    ? FlattedJSON.stringify(state) as any\r\n                    : JSON.stringify(state) as any\r\n                )\r\n              )\r\n            )\r\n          )\r\n      )\r\n\r\n      /**\r\n       * Async version of plugin\r\n       * @param {Store<S>} store\r\n       */\r\n      this.plugin = (store: Store<S>) => {\r\n        /**\r\n         * For async stores, we're capturing the Promise returned\r\n         * by the `restoreState()` function in a `restored` property\r\n         * on the store itself. This would allow app developers to\r\n         * determine when and if the store's state has indeed been\r\n         * refreshed. This approach was suggested by GitHub user @hotdogee.\r\n         * See https://github.com/championswimmer/vuex-persist/pull/118#issuecomment-500914963\r\n         * @since 2.1.0\r\n         */\r\n        (store as any).restored = ((this.restoreState(this.key, this.storage)) as Promise<S>).then((savedState) => {\r\n          /**\r\n           * If in strict mode, do only via mutation\r\n           */\r\n          if (this.strictMode) {\r\n            store.commit('RESTORE_MUTATION', savedState)\r\n          } else {\r\n            store.replaceState(merge(store.state, savedState || {}, this.mergeOption) as S)\r\n          }\r\n          this.subscriber(store)((mutation: MutationPayload, state: S) => {\r\n            if (this.filter(mutation)) {\r\n              this._mutex.enqueue(\r\n                this.saveState(this.key, this.reducer(state), this.storage) as Promise<void>\r\n              )\r\n            }\r\n          })\r\n          this.subscribed = true\r\n        })\r\n      }\r\n    } else {\r\n\r\n      /**\r\n       * Sync {@link #VuexPersistence.restoreState} implementation\r\n       * @type {((key: string, storage?: Storage) =>\r\n       *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\r\n       */\r\n      this.restoreState = (\r\n        (options.restoreState != null)\r\n          ? options.restoreState\r\n          : ((key: string, storage: Storage) => {\r\n            const value = (storage).getItem(key)\r\n            if (typeof value === 'string') {// If string, parse, or else, just return\r\n              return (\r\n                this.supportCircular\r\n                  ? FlattedJSON.parse(value || '{}')\r\n                  : JSON.parse(value || '{}')\r\n              )\r\n            } else {\r\n              return (value || {})\r\n            }\r\n          })\r\n      )\r\n\r\n      /**\r\n       * Sync {@link #VuexPersistence.saveState} implementation\r\n       * @type {((key: string, state: {}, storage?: Storage) =>\r\n       *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\r\n       */\r\n      this.saveState = (\r\n        (options.saveState != null)\r\n          ? options.saveState\r\n          : ((key: string, state: {}, storage: Storage) =>\r\n            (storage).setItem(\r\n              key, // Second argument is state _object_ if localforage, stringified otherwise\r\n              (\r\n                this.supportCircular\r\n                  ? FlattedJSON.stringify(state) as any\r\n                  : JSON.stringify(state) as any\r\n              )\r\n            )\r\n          )\r\n      )\r\n\r\n      /**\r\n       * Sync version of plugin\r\n       * @param {Store<S>} store\r\n       */\r\n      this.plugin = (store: Store<S>) => {\r\n        const savedState = this.restoreState(this.key, this.storage) as S\r\n\r\n        if (this.strictMode) {\r\n          store.commit('RESTORE_MUTATION', savedState)\r\n        } else {\r\n          store.replaceState(merge(store.state, savedState || {}, this.mergeOption) as S)\r\n        }\r\n\r\n        this.subscriber(store)((mutation: MutationPayload, state: S) => {\r\n          if (this.filter(mutation)) {\r\n            this.saveState(this.key, this.reducer(state), this.storage)\r\n          }\r\n        })\r\n\r\n        this.subscribed = true\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a subscriber on the store. automatically is used\r\n   * when this is used a vuex plugin. Not for manual usage.\r\n   * @param store\r\n   */\r\n  private subscriber = (store: Store<S>) =>\r\n    (handler: (mutation: MutationPayload, state: S) => any) => store.subscribe(handler)\r\n}\r\n\r\nexport {\r\n  MockStorage, AsyncStorage, PersistOptions\r\n}\r\n\r\nexport default VuexPersistence\r\n"],"names":[],"mappings":"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"}